/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* middleNode(ListNode* head) {

        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL){
            fast=fast->next;
            if(fast->next!=NULL){
                fast=fast->next;
                slow=slow->next;
            }
        }
        return slow;
    }
ListNode* reverseList(ListNode* head) {
        ListNode* prev=NULL;
        ListNode* curr=head;
        while(curr!=NULL){
            ListNode* temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }

        return prev;
    }
bool compareList(ListNode* head,ListNode* head2){
    while(head!=NULL && head2!=NULL){
        if(head->val != head2->val){
            return false;
        }
        else{
            head=head->next;
            head2=head2->next;
        }
    }
    return true;
}
    bool isPalindrome(ListNode* head) {
        //Break into 2 halves reverse the second half and then compare it
        ListNode* midNode=middleNode(head);
        ListNode* head2=midNode->next;
        midNode->next=NULL;
        head2=reverseList(head2);
        bool ans=compareList(head,head2);
        return ans;

    }
};
